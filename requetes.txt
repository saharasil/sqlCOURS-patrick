******** Exercice 1 **********

CREATE TABLE t_utilisateurs
(
    id INT PRIMARY KEY NOT NULL AUTO_INCREMENT,
    nom VARCHAR(100),
    prenom VARCHAR(100),
    email VARCHAR(255),
    date_naissance DATE,
    pays VARCHAR(255),
    ville VARCHAR(255),
    code_postal VARCHAR(5),
    nombre_achat INT
)

!!!!!! t_utilisateur / user / usres / t_user/ tusers : les nom qu'on peut affronter comme nom de base de donné
!!!!!! j'ai 9 colonnes dans ma base chaque début de phrase donne le nom de la colonne : exp : 1 - nom, 2- prenom , 3- email ......

!!!!! les types de données :
!!!!!! INT = integer = un nombre entier
!!!!!! VARCHAR = chaine de caractère dont le nombre de caractère est limité exp :  VARCHAR(5) = 5 nombre de caractères
!!!!!!! DATE 
!!!!!!! TEXT


INSERT INTO t_utilisateurs (id, nom, prenom, email, date_naissance, pays, ville, code_postal, nombre_achat) VALUES (NULL, 'Ferchichi', 'Sahar', 'sahar.ferchichi@lepoles.com', '1989-05-16', 'France', 'Paris','93140', NULL);

SELECT * FROM t_utilisateurs ORDER BY nom ASC 
SELECT nom, prenom FROM t_utilisateurs
SELECT * FROM t_utilisateurs WHERE ville ='paris'

!!! supprimer un enregistrement
DELETE FROM t_utilisateurs WHERE nom=''


******** Exercice 2 **********


* CREATE TABLE IF NOT EXISTS employes (
id_employes int(3) NOT NULL AUTO_INCREMENT,
prenom varchar(20) DEFAULT NULL,
nom varchar(20) DEFAULT NULL,
sexe enum('m','f') NOT NULL,
service varchar(30) DEFAULT NULL,
date_embauche date DEFAULT NULL,
salaire float DEFAULT NULL,
PRIMARY KEY (id_employes)
) ENGINE=InnoDB DEFAULT CHARSET=latin1 ;

* INSERT INTO employes (id_employes, prenom, nom, sexe, service, date_embauche, salaire) VALUES
(350, 'Jean-pierre', 'Laborde', 'm', 'direction', '1999-12-09', 5000),
(388, 'Clement', 'Gallet', 'm', 'commercial', '2000-01-15', 2300),
(415, 'Thomas', 'Winter', 'm', 'commercial', '2000-05-03', 3550),
(417, 'Chloe', 'Dubar', 'f', 'production', '2001-09-05', 1900),
(491, 'Elodie', 'Fellier', 'f', 'secretariat', '2002-02-22', 1600),
(509, 'Fabrice', 'Grand', 'm', 'comptabilite', '2003-02-20', 1900),
(547, 'Melanie', 'Collier', 'f', 'commercial', '2004-09-08', 3100),
(592, 'Laura', 'Blanchet', 'f', 'direction', '2005-06-09', 4500),
(627, 'Guillaume', 'Miller', 'm', 'commercial', '2006-07-02', 1900),
(655, 'Celine', 'Perrin', 'f', 'commercial', '2006-09-10', 2700),
(699, 'Julien', 'Cottet', 'm', 'secretariat', '2007-01-18', 1390),
(701, 'Mathieu', 'Vignal', 'm', 'informatique', '2008-12-03', 2000),
(739, 'Thierry', 'Desprez', 'm', 'secretariat', '2009-11-17', 1500),
(780, 'Amandine', 'Thoyer', 'f', 'communication', '2010-01-23', 1500),
(802, 'Damien', 'Durand', 'm', 'informatique', '2010-07-05', 2250),
(854, 'Daniel', 'Chevel', 'm', 'informatique', '2011-09-28', 1700),
(876, 'Nathalie', 'Martin', 'f', 'juridique', '2012-01-12', 3200),
(900, 'Benoit', 'Lagarde', 'm', 'production', '2013-01-03', 2550),
(933, 'Emilie', 'Sennard', 'f', 'commercial', '2014-09-11', 1800),
(990, 'Stephanie', 'Lafaye', 'f', 'assistant', '2015-06-02', 1775);


* SELECT service FROM employes ORDER by service ASC : afficher les services par ordre alphabitique

* SELECT DISTINCT(service) FROM employes : afficher les services de manière regroupés

* SELECT id_employes, prenom, nom, sexe, service, date_embauche, salaire FROM employes: afficher toute la table

* SELECT nom, prenom FROM employes WHERE service="informaique" : affiche le nom et le prenom des employes dasn le service informatique

* SELECT nom, prenom, date_embauche FROM employes WHERE date_embauche BETWEEN '2006-01-01' AND '2010-12-31' : affiche moi // quoi? // de? // nom de la table // à condition que .. (là o) // les employés soit entré dans la société entre 2066 et 2010

* CURDATE () : une fonction dans php pour dire la date courante
            SELECT nom, prenom, date_embauche FROM employes WHERE date_embauche BETWEEN '2006-01-01' AND CURDATE()

* SELECT prenom FROM employes WHERE prenom LIKE 's%' : affiche out les prenoms qui commencent par un s

* SELECT prenom FROM employes WHERE prenom LIKE '%s' : affiche out les prenoms qui finissent par un s

* SELECT prenom FROM employes WHERE prenom LIKE '%-%' : affiche out les prenoms qui contiennent une " - "

* SELECT nom, prenom, service FROM employes WHERE service !='infotmatique' ou <> à la place de !=(différent);

* SELECT nom, prenom, salaire FROM employes WHERE salaire > 3000; 

* SELECT nom, prenom, salaire FROM employes WHERE salaire < 3000 ORDER BY salaire ASC : trier  par salaire inférieur à 3000

* SELECT nom, prenom, salaire FROM employes WHERE salaire < 3000 ORDER BY salaire ASC, prenom ASC  : trier  par salaire inférieur à 3000 et les prenom sont trier par ordre alphabitique 

* SELECT nom, prenom, salaire FROM employes WHERE salaire < 3000 ORDER BY salaire ASC, prenom ASC, sexe ASC : trier  par salaire inférieur à 3000 et les prenom sont trier par ordre alphabitique  et les femmes avant les hommes

* SELECT nom, prenom, service, salaire FROM employes ORDER BY salaire DESC LIMIT 0,3